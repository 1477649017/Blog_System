代码实现：
要实现的功能：
 博客列表的展示
 博客详情的展示
 博客的新增
 博客的修改
 博客的发布
 用户的登录
 用户的注销
 显示用户信息


1，首席引入项目所需的各种依赖 涉及文件pom.xml

2，实现数据库的相关代码
   a:封装数据的数据源 连接 利用单例模式,注意线程安全问题  ctrl+alt+t 包裹功能 给某段代码外面套上例如if等等的层次
   b:创建实体类 也即是用户类 博客类 一个实体类的对象就是数据库表中的一条记录
   c:针对实体类的属性的增删改查方法进一步进行封装 也即是jdbc的代码的封装

3，实现前后端的交互\
  前后端在交互的时候，请求页面，请求页面样式文件，图片，请求页面数据，这些都是不同的请求完成的
  博客列表页：约定前后端交互的接口
     在页面刷新的时候，定义一个函数，利用ajax构造一个get请求向服务器请求博客列表的数据
     请求 Get /blog
     响应 http/1.1 200 ok
         content-type : application/json
         body: [{,,,,},{,,,,}] 一个json字符串，里面是一个数组 数组的每一个对象就是一个博客


  注意：对于时间格式化类的使用，因为每种语言基本都有这个设定，所以规则可能都是不一样的，不要去硬背，需要使用的时候去查才是最正确的

  博客详情页：
    在博客列表页会有一个查看全文的按钮，点击会跳转到指定的博文 这个a标签在列表页中是指定了参数的 例如http://127.0.0.1:8080/blog_system/blog_detail.html?blogId=5
    后面会有具体的blogId 所以在进入博客详情页的时候需要我们根据这个ID去查询相应的文章 并且显示到页面上
    请求 Get /blog?blogId=X
    根据参数去查询
    响应：
    http/1.1 200 ok
    content-type : application/json
    {,,,,,} 一个详细的博客内容


  登录页：
    在登录页 输入用户名与密码，点击登录之后把用户名密码提交给服务器进行校验，验证成功跳转到博客列表页
    约定前后端交互接口：
     前端：post /login content-type : application/x-www-form-urlencoded form表单
          body : username=xx & password=xxxx

     响应：
        Http/1.1 200 ok
        Location: blog-list.html 重定向一下

  注册页：
     和登录页面相似
     前端 post /register content-type : application/x-www-form-urlencoded form表单
         body : username=xx & password=xxxx

     后端:
       Http/1.1 200 ok
       Location:blog_login.html 重定向 刷新页面一下 直接开始登录


4，强制登录才能访问列表页 编辑页 设定用户权限
   在访问列表页 编辑页的时候就会通过ajax构造一个get请求获取登录状态 在后端通过会话进行判断

5，在博客列表页显示当前登录用户信息 在博客详情页显示当前文章的作者信息
  博客列表页：
     请求 Get /userInfo
     响应 {,,,}一个用户的信息 json格式 只不过这里后端要把oassword处理一下更好
  博客详情页 ：
     请求 Get /userInfo?blodId=?
     响应：{,,,,}

6，实现注销功能
  在博客列表页 博客详情页 编辑页上方导航栏处都有一个注销的按钮 也就是一个a标签
  点击这个a标签 给服务器发送一个http请求 告诉服务器现在我们要退出登录状态了
  注销的实现方式有很多，我们这里采用的是删除会话中的user对象，因为会话提供了可以直接删除里面元素的方法。这里不是删除会话
  前面在判定登录状态的时候我们也是会话和user对象都存在才会说明当前是已经登录的状态。

  前后端交互
     前端： a标签直接发送http请求 Get  /logout
     后端 http/1.1 302
         location : login.html


7，实现博客发布功能
   点击发布按钮，然后检索出文章的标题 正文信息 通过form表单的形式提交给服务器
   服务器接收到数据之后 将数据插入进入数据库中

   前后端交互：
      前端： Post /blog  Content-Type : application/x-www-form-urlencoded
      后端：响应 重定向到博客列表页 列表页就会重新向服务器请求数据 就可以看到刚才新加的博客了


8，删除博客
   在博客详情页 加上一个删除按钮a标签  点击删除按钮就可以删除博客 只不过后端删除要做校验 因为你不能删除别人的博客
   前后端交互：
      前端：Get /blog_delete?blogId=?
      后端 ：删除成功 删除不成功 200/403
